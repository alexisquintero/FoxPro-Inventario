TODO:
	-Controlar que al borrar una clase también haya que borrar otras, por ejemplo
		-Proveedor -> productos-proveedor y contactos
		-Venta -> lineas
		-Producto -> producto-proveedor
		-Producto -> proveedor -> producto

	-Agregar el botón "AGREGAR PRODUCTO" a la grilla o ABM de proveedor

	-Controlar que no haya 2 empleados con el mismo usuario

	-Agregar productos solo desde proveedores o desde venta, dependiendo del tipo, desde la grilla solo modificarlos 

	-Agregar el botón CAMBIAR CONTRASEÑA al MENU

	-Controlar que fecha venciminento >= fecha arribo

HECHO:

	-Las entidades que tiene otras entidades como propiedades tiene que ser inicializadas con una instancia de dicha entidad (Ej: inicializar el empleado de una 			venta con NEWOBJECT) (Las colecciones van a ser cursores, no hace falta inicializarlas)

	-Cambiar fecha_vencimiento para que sea date en lugar de int

	-El form ABM acepta un objeto de parámetro para inicializar los valores (cuando se modifica o elimina), cambiar el nombre del botón guardar y hacer visible 		el botón eliminar si se envía 1 parámtero

	-Controlar de los txt del abm que no estén vacíos si son visibles (en el form padre, abm)

	-Arreglar Diagrama de Clases, las flechas que sale de Proveedor están al revez (la de herencia está bien)

	-Agregarle una contraseña al empleado para el login

	-Agregar USUARIO al diagrama de datos en EMPLEADO

SUGERENCIAS:

	-Capaz que sea mejor que getOne() y getAll() de ProductoProveedor y VentaProductos devuelvan 1 solo item y todos los items de un Proveedor/Venta 			respectivamente

	-Agregar filtro a la grilla

OTROS:

	-Los form abm tiene la propiedad modo, que sirve para saber si se llama a nuevo o modificar con el botón guardar/modificar.

	-Al crear un objeto que necesita parámetros, si no se quieren pasar parámetros igualmente escribirlos como .NULL.

	-La contraseña por default es  "primer letra del nombre + apellido" y en el menú hay un botón para cambiarla.




